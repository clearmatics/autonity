name: Go
on: [push]
env:
  # We don't have access to the HOME environemnt variable here since we are not
  # inside a runner at this point, so we just have to hardcode '/home/runner',
  # if we instead defined these environment variables when we did have access
  # to HOME we would need to define them for each job, which would defeat the
  # purpose of defining them here.
  GO_CACHE: /home/runner/.cache/go-build
  GO_MODULES_CACHE: /home/runner/go/pkg
  AUTONITY_REPO_ROOT: /home/runner/work/autonity/autonity/

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: ${{ env.AUTONITY_REPO_ROOT }}
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Cache modules
        uses: actions/cache@v1
        id: cache-autonity-go-modules
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Fetch all modules
        if:  steps.cache-autonity-go-modules.outputs.cache-hit != 'true'
        run: go mod download -x

      - name: Go cache
        uses: actions/cache@v1
        with:
          path: ${{ env.GO_CACHE }}
          key: ${{ runner.os }}-autonity-go-cache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Build
        #if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

  # build:
  #   needs: bootstrap
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Go
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.15

  #     - name: Cache code
  #       uses: actions/cache@v1
  #       id: cache-autonity-code
  #       with:
  #         path: ${{ env.AUTONITY_REPO_ROOT }}
  #         key: ${{ runner.os }}-autonity-code-${{ github.sha }}

  #     - uses: actions/checkout@v2
  #       if: steps.cache-autonity-code.outputs.cache-hit != 'true'

  #     - name: Cache modules
  #       uses: actions/cache@v1
  #       id: cache-autonity-go-modules
  #       with:
  #         path: ${{ env.GO_MODULES_CACHE }}
  #         key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

  #     - name: Build
  #       run: make autonity

  #     - name: Upload Autonity bin
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: autonity
  #         path: ${{ env.AUTONITY_REPO_ROOT }}build/bin/autonity

  tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      # helps prevent '[failed to restore the stack]' messages when race detected.
      GORACE: "history_size=7"
    strategy:
      matrix:
        # Here we set up a matrix to control our tests, we use go list and
        # negative grep to get most of the test packages for the main tests
        # excluding packages of particular interest. The excluded package are
        # those that are slow to test, our e2e tests and tendermint core.
        tests: [[Main tests, $(go list ./... | grep -E -v "/les|/p2p|/eth|/consensus/tendermint|/consensus/test")],
                [Slow tests, ./les/... ./p2p/... ./eth/...],
                [Tendermint core tests, ./consensus/tendermint/... -timeout 5m -race],
                [E2E tests, ./consensus/test/... -v]]

    name: ${{ matrix.tests[0] }}

    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: ${{ env.AUTONITY_REPO_ROOT }}
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run tests
        run: go test ${{ matrix.tests[1] }}

  tendermint-coverage:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: ${{ env.AUTONITY_REPO_ROOT }}
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run coverage
        run: go test ./consensus/tendermint/... -timeout 5m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  linters:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: ${{ env.AUTONITY_REPO_ROOT }}
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  contract_tests:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '9.x'

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: ${{ env.AUTONITY_REPO_ROOT }}
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

      - name: test contract
        run: make test-contracts
